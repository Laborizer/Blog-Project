{"version":3,"sources":["NewPostDialog.jsx","Comment.jsx","BlogPostTest.jsx","Search.jsx","App.js","serviceWorker.js","index.js"],"names":["NewBlogPost","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","show","setState","visible","hide","tags","postIt","newPost","title","titleTextField","current","value","author","authorTextField","content","contentTextField","creationDate","Date","getTime","blogItem","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","newDataTable","data","slice","unshift","updateData","postTags","tagArray","i","state","length","tagObject","blogId","id","tagName","push","tagData","updateTagData","addTag","addedTags","tag","tagsTextField","console","log","removeTag","splice","React","createRef","_this2","actions","react_default","a","createElement","es","flat","secondary","swapTheming","onClick","primary","chips","map","key","label","removable","className","raised","onHide","width","height","required","ref","rows","PureComponent","Comment","like","isLiked","url","likedComment","commentData","likes","updateCommentData","style","marginTop","marginBottom","maxWidth","classname","subtitle","align","marginRight","BlogPostTest","editIt","editedPost","editPostDialog","comment","postedComment","nicknameTextField","commentTextField","deletePost","deletedPost","makeDate","currentDate","getDate","getMonth","getFullYear","showComments","Comment_Comment","commentDate","updateCommentLikes","tagString","margin","marginTablet","minWidth","float","showTags","expander","expandable","lineDirection","Search","titles","item","uniqueHits","concat","filter","v","indexOf","placeholder","resize","min","max","leftIcon","Autocomplete","caseInsensitiveFilter","onAutocomplete","onChange","App","newData","loadingData","showData","givenData","BlogPostTest_BlogPostTest","getPostsByTags","hitArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","hit","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","hits","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","searchResults","showSearch","blogPostsStyle","marginLeft","colored","children","Search_Search","NewPostDialog_NewBlogPost","Component","Boolean","window","location","hostname","match","WebFontLoader","load","google","families","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4892bc2d.chunk.js","sourcesContent":["import {Button, DialogContainer, TextField, Chip} from \"react-md\";\r\nimport React, {PureComponent} from \"react\";\r\n\r\nexport default class NewBlogPost extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.titleTextField = React.createRef();\r\n        this.authorTextField = React.createRef();\r\n        this.contentTextField = React.createRef();\r\n        this.tagsTextField = React.createRef();\r\n\r\n        this.state = {\r\n            visible: false,\r\n            tags: []\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({visible: true});\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({visible: false, tags: []});\r\n    }\r\n\r\n    postIt = () => {\r\n        let newPost = {\r\n            \"title\": this.titleTextField.current.value,\r\n            \"author\": this.authorTextField.current.value,\r\n            \"content\": this.contentTextField.current.value,\r\n            \"creationDate\": new Date().getTime()\r\n        }\r\n        let blogItem = {};\r\n\r\n        fetch('./addBlogItem', {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(newPost)\r\n        }).then(response => response.json())\r\n        .then(json => {\r\n            let newDataTable = this.props.data.slice();\r\n            blogItem = json;\r\n            newDataTable.unshift(json);\r\n            this.props.updateData(newDataTable);\r\n            this.postTags(blogItem);\r\n        });\r\n    }\r\n\r\n    postTags = (blogItem) => {\r\n        this.hide();\r\n        let tagArray = []\r\n        for (let i=0; i<this.state.tags.length;i++) {\r\n            let tagObject = {};\r\n            tagObject.blogId = blogItem.id;\r\n            tagObject.tagName = this.state.tags[i].tagName\r\n            tagArray.push(tagObject)\r\n        }\r\n        fetch('./addTags', {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(tagArray)\r\n        }).then(response => response.json())\r\n        .then(json => {\r\n            let newDataTable = this.props.tagData.slice();\r\n            for (let i=0; i<json.length; i++) {\r\n                newDataTable.push(json[i]);\r\n            }\r\n            this.props.updateTagData(newDataTable);\r\n            this.setState({tags: []});\r\n        });\r\n    }\r\n\r\n    addTag = () => {\r\n        const addedTags = this.state.tags.slice();\r\n        let tag = {\r\n            tagName: \"#\" + this.tagsTextField.current.value\r\n        }\r\n        addedTags.push(tag);\r\n        this.setState({tags: addedTags})\r\n        console.log(\"Added tag\");\r\n    }\r\n\r\n    removeTag = (tag) => {\r\n        const addedTags = this.state.tags.slice();\r\n        for( var i = 0; i < addedTags.length; i++){\r\n            if (addedTags[i].tagName === tag.tagName) {\r\n                addedTags.splice(i, 1);\r\n            }\r\n        }\r\n        this.setState({tags: addedTags});\r\n    }\r\n\r\n    render() {\r\n        const actions = [];\r\n        actions.push(<Button flat secondary swapTheming onClick={this.hide}>Cancel</Button>);\r\n        actions.push(<Button flat primary swapTheming onClick={this.postIt}>Send</Button>);\r\n\r\n        const chips = this.state.tags.map(tag =>\r\n            <Chip key={tag.id}\r\n                  label={tag.tagName}\r\n                  removable\r\n                  onClick={()=>this.removeTag(tag)}\r\n            />);\r\n\r\n        return (\r\n            <div>\r\n                <Button className=\"md-full-width\" raised secondary onClick={this.show}>Create a New Post</Button>\r\n                <DialogContainer\r\n                    id=\"new-post\"\r\n                    visible={this.state.visible}\r\n                    onHide={this.hide}\r\n                    actions={actions}\r\n                    title=\"Write a new Post\"\r\n                    width={800}\r\n                    height={600}\r\n                >\r\n                    <TextField\r\n                        id=\"title\"\r\n                        label=\"Title\"\r\n                        required={true}\r\n                        ref={this.titleTextField}\r\n                    />\r\n                    <TextField\r\n                        id=\"author\"\r\n                        label={\"Author\"}\r\n                        required={true}\r\n                        ref={this.authorTextField}\r\n                    />\r\n                    <TextField\r\n                        id=\"content\"\r\n                        label=\"Content\"\r\n                        rows={5}\r\n                        required={true}\r\n                        ref={this.contentTextField}\r\n                    />\r\n                    {chips}\r\n                    <TextField\r\n                        className = \"md-cell\"\r\n                        id=\"tagsField\"\r\n                        label=\"Tags\"\r\n                        ref={this.tagsTextField}\r\n                    />\r\n\r\n                <Button flat primary swapTheming className=\"md-cell\" onClick={this.addTag}>Add Tag</Button>\r\n                </DialogContainer>\r\n            </div>\r\n        );\r\n    }\r\n}","import {Card, CardText, CardTitle, CardActions, Button} from \"react-md\";\r\nimport React, {PureComponent} from \"react\";\r\n\r\nimport './App.scss';\r\n\r\nexport default class Comment extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLiked: false\r\n        }\r\n\r\n    }\r\n\r\n    like = () => {\r\n        if (!this.state.isLiked) {\r\n            let url = \"/likeComment/\" + this.props.id\r\n\r\n            let likedComment = {\r\n                \"id\": this.props.id\r\n            }\r\n\r\n            fetch(url, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(likedComment)\r\n            }).then(response => response.json())\r\n            .then(json => {\r\n                this.setState({isLiked: true});\r\n                let newDataTable = this.props.commentData.slice();\r\n                for( var i = 0; i < newDataTable.length; i++){\r\n                    if (newDataTable[i].id === this.props.id) {\r\n                        newDataTable[i].likes += 1;\r\n                    }\r\n                }\r\n                this.props.updateCommentData(newDataTable);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const style = {\r\n            marginTop: 5,\r\n            marginBottom: 5,\r\n            maxWidth: 320,\r\n        }\r\n        return (\r\n            <div>\r\n                <Card style={style} classname=\"comment\">\r\n                    <CardTitle title={this.props.title} subtitle={\"By: \" + this.props.author}/>\r\n                    <CardText>\r\n                        <p>{this.props.content}</p>\r\n                    </CardText>\r\n                    <CardActions>\r\n                        <Button style={{align: 'left', marginRight: 10}} raised onClick={this.like}>Like</Button>\r\n                        <p>Likes: {this.props.likes}</p>\r\n                    </CardActions>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","import {Card, CardText, CardTitle, CardActions, Button, TextField, DialogContainer} from \"react-md\";\r\nimport React, {PureComponent} from \"react\";\r\nimport Comment from './Comment.jsx';\r\n\r\nimport './App.scss';\r\n\r\nexport default class BlogPostTest extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.commentTextField = React.createRef();\r\n        this.nicknameTextField = React.createRef();\r\n        this.titleTextField = React.createRef();\r\n        this.contentTextField = React.createRef();\r\n\r\n        this.state = {\r\n            visible: false\r\n        };\r\n    }\r\n\r\n    show = () => {\r\n        this.setState({visible: true});\r\n    }\r\n\r\n    hide = () => {\r\n        this.setState({visible: false});\r\n    }\r\n\r\n    editIt = () => {\r\n        let editedPost = {\r\n            \"id\": this.props.id,\r\n            \"title\": this.titleTextField.current.value,\r\n            \"content\": this.contentTextField.current.value,\r\n        }\r\n\r\n        fetch('./editBlogItem', {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(editedPost)\r\n        }).then(response => response.json())\r\n        .then(json => {\r\n            let newDataTable = this.props.data.slice();\r\n            for( var i = 0; i < newDataTable.length; i++){\r\n                if (newDataTable[i].id === this.props.id) {\r\n                    newDataTable[i].title = json.title;\r\n                    newDataTable[i].content = json.content;\r\n                }\r\n            }\r\n            this.props.updateData(newDataTable);\r\n        });\r\n    }\r\n\r\n    editPostDialog = () => {\r\n        const actions = [];\r\n        actions.push(<Button flat secondary swapTheming onClick={this.hide}>Cancel</Button>);\r\n        actions.push(<Button flat primary swapTheming onClick={this.editIt}>Send</Button>);\r\n        return (\r\n            <div>\r\n                <DialogContainer\r\n                    id=\"edit-post\"\r\n                    visible={this.state.visible}\r\n                    onHide={this.hide}\r\n                    actions={actions}\r\n                    title=\"Edit Post\"\r\n                    width={600}\r\n                >\r\n                    <TextField\r\n                        id=\"title\"\r\n                        label=\"Title\"\r\n                        required={true}\r\n                        ref={this.titleTextField}\r\n                    />\r\n                    <TextField\r\n                        id=\"content\"\r\n                        label=\"Content\"\r\n                        rows={5}\r\n                        required={true}\r\n                        ref={this.contentTextField}\r\n                    />\r\n                </DialogContainer>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    comment = () => {\r\n        let url = \"./addComment\"\r\n        let postedComment = {\r\n            \"blogId\": this.props.id,\r\n            \"author\": this.nicknameTextField.current.value,\r\n            \"content\": this.commentTextField.current.value,\r\n        };\r\n\r\n        fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(postedComment)\r\n        }).then(response => response.json())\r\n        .then(json => {\r\n            let newDataTable = this.props.commentData.slice();\r\n            newDataTable.unshift(json);\r\n            this.props.updateCommentData(newDataTable);\r\n        });\r\n    }\r\n\r\n    deletePost = () =>{\r\n        let url = \"./deleteBlogItem/\" + this.props.id;\r\n        let deletedPost = {\r\n            \"id\": this.props.id,\r\n            \"title\": this.props.title,\r\n            \"author\": this.props.author,\r\n            \"content\": this.props.content,\r\n            \"creationDate\": this.props.creationDate\r\n        };\r\n\r\n        fetch(url, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(deletedPost)\r\n        }).then(response => response.json())\r\n        let newDataTable = this.props.data.slice();\r\n        for( var i = 0; i < newDataTable.length; i++){\r\n           if (newDataTable[i].id === this.props.id) {\r\n             newDataTable.splice(i, 1);\r\n           }\r\n        }\r\n        this.props.updateData(newDataTable);\r\n    }\r\n\r\n    makeDate = () => {\r\n        var currentDate = new Date(this.props.creationDate);\r\n\r\n        var date = currentDate.getDate();\r\n        var month = currentDate.getMonth();\r\n        var year = currentDate.getFullYear();\r\n\r\n        var dateString = date + \".\" +(month + 1) + \".\" + year;\r\n\r\n        return (\r\n            dateString\r\n        )\r\n    }\r\n\r\n    showComments = () => {\r\n        return (\r\n          <div>\r\n            {this.props.commentData.map((comment) => {\r\n              if (this.props.id === comment.blogId) {\r\n                return (\r\n                    <div key={comment.id}>\r\n                        <Comment\r\n                            id={comment.id}\r\n                            blogId={comment.blogId}\r\n                            commentDate={comment.commentDate}\r\n                            author={comment.author}\r\n                            content={comment.content}\r\n                            likes={comment.likes}\r\n                            commentData={this.props.commentData}\r\n                            updateCommentData={this.props.updateCommentData}\r\n                            updateCommentLikes={this.updateCommentLikes}\r\n                        />\r\n                    </div>\r\n                );\r\n              }\r\n              return null;\r\n            })}\r\n          </div>\r\n        );\r\n    }\r\n\r\n    showTags() {\r\n        let tagString = \"\";\r\n        this.props.tagData.map((tag) => {\r\n            if (tag.blogId === this.props.id) {\r\n                if (tagString === \"\") {\r\n                    tagString = tag.tagName;\r\n                } else {\r\n                    tagString = tagString + \", \" + tag.tagName;\r\n                }\r\n            }\r\n        })\r\n        return (\r\n            <p>{tagString}</p>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const style = {\r\n            marginTablet: 50,\r\n            minWidth: 200,\r\n            float: 'middle'\r\n        }\r\n\r\n        const divStyle = {\r\n            margin: 50\r\n        }\r\n\r\n        return (\r\n            <div style={divStyle}>\r\n                {this.editPostDialog()}\r\n                <Card style={style} className=\"blogpost\">\r\n                    <CardTitle\r\n                     title={this.props.title}\r\n                     subtitle={\"By: \" + this.props.author + \", \" + this.makeDate()}\r\n                    />\r\n                    <CardText>\r\n                        <p>{this.props.content}</p>\r\n                        <p>Tags: {this.showTags()}</p>\r\n\r\n                    </CardText>\r\n                    <CardActions expander>\r\n                    </CardActions>\r\n                    <CardText expandable>\r\n                        <TextField\r\n                              id={\"postCommentField\" + this.props.id}\r\n                              required\r\n                              label=\"Comment\"\r\n                              lineDirection=\"center\"\r\n                              className=\"md-cell md-cell--bottom\"\r\n                              ref={this.commentTextField}\r\n                        />\r\n                        <TextField\r\n                              id={\"commentAuthorField\" + this.props.id}\r\n                              required\r\n                              label=\"Nickname\"\r\n                              lineDirection=\"center\"\r\n                              className=\"md-cell md-cell--bottom\"\r\n                              ref={this.nicknameTextField}\r\n                        />\r\n                        <Button raised onClick={this.comment}>Comment</Button>\r\n                        <Button raised onClick={this.deletePost}>Delete</Button>\r\n                        <Button raised onClick={this.show}>Edit</Button>\r\n                        {this.showComments()}\r\n                    </CardText>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}","import {FontIcon, Autocomplete} from \"react-md\";\r\nimport React, {PureComponent} from \"react\";\r\n\r\nexport default class Search extends PureComponent {\r\n    render() {\r\n        let titles = this.props.data.map(item => item.title);\r\n\r\n        let tags = this.props.tagData.map(item => item.tagName);\r\n\r\n        let hits = titles.concat(tags);\r\n        let uniqueHits = hits.filter((v, i, a) => a.indexOf(v) === i);\r\n        return (\r\n            <div  className=\"md-grid\">\r\n                <Autocomplete\r\n                    id=\"searchField\"\r\n                    lineDirection=\"center\"\r\n                    placeholder={\"Search\"}\r\n                    resize={{min: 400, max: 1000}}\r\n                    leftIcon={<FontIcon>search</FontIcon>}\r\n                    className=\"md-cell md-cell--bottom \"\r\n                    data={uniqueHits}\r\n                    filter={Autocomplete.caseInsensitiveFilter}\r\n                    onAutocomplete={this.props.onAutocomplete}\r\n                    onChange={this.props.onChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {Toolbar} from 'react-md';\r\nimport './App.scss';\r\n\r\nimport NewPostDialog from './NewPostDialog.jsx';\r\nimport BlogPostTest from './BlogPostTest.jsx';\r\nimport Search from './Search.jsx';\r\n\r\n/**\r\n * Blog-Pro is a simple blogging application. It allows users to create blog posts with tags as well as browse, search\r\n * comment other blog posts.\r\n *\r\n * App component is the main component of the React application. It holds and controls other components of the\r\n * app and user interface.\r\n *\r\n * @author Lauri Laiho\r\n * @since 2019-03-14\r\n */\r\nclass App extends Component {\r\n\r\n    /**\r\n     * Constructor of App component\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            commentData: [],\r\n            searchResults: [],\r\n            tagData: [],\r\n            loadingData: false,\r\n            showSearch: false\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Function updates the blog post data of the state\r\n     *\r\n     * @param newData New data to be set into the state. Contains blog post objects.\r\n     */\r\n    updateData = (newData) => {\r\n        this.setState({loadingData: true});\r\n        this.setState({data: newData, loadingData: false})\r\n    }\r\n\r\n    /**\r\n     * Function updates the comment data of the state\r\n     *\r\n     * @param newData New data to be set into the state. Contains comment objects.\r\n     */\r\n    updateCommentData = (newData) => {\r\n        this.setState({commentData: newData})\r\n    }\r\n\r\n    /**\r\n     * Function updates the tag data of the state\r\n     *\r\n     * @param newData New data to be set into the state. Contains tag objects.\r\n     */\r\n    updateTagData = (newData) => {\r\n        this.setState({tagData: newData})\r\n        console.log(this.state.tagData);\r\n    }\r\n\r\n    /**\r\n     * Lifecycle method invoke when component has been mounted by React. Fetches data from the backend and sets them\r\n     * into state.\r\n     */\r\n    componentDidMount() {\r\n        this.setState({loadingData: true});\r\n        fetch('/getBlogItems')\r\n            .then(response => response.json())\r\n            .then(json => this.setState({data: json}))\r\n        fetch('/getAllComments')\r\n            .then(response => response.json())\r\n            .then(json => this.setState({commentData: json}))\r\n        fetch('/getAllTags')\r\n            .then(response => response.json())\r\n            .then(json => this.setState({tagData: json, loadingData: false}))\r\n\r\n    }\r\n\r\n    showData = (givenData) => {\r\n        return (\r\n            givenData.map((item) =>\r\n                    <BlogPostTest key={item.id}\r\n                        id={item.id}\r\n                        title={item.title}\r\n                        author={item.author}\r\n                        content={item.content}\r\n                        creationDate={item.creationDate}\r\n                        data={this.state.data}\r\n                        commentData={this.state.commentData}\r\n                        tagData={this.state.tagData}\r\n                        updateData={this.updateData}\r\n                        updateCommentData={this.updateCommentData}\r\n                        updateTagData={this.updateTagData}\r\n                    />\r\n            )\r\n        );\r\n    }\r\n\r\n    getPostsByTags = (tag) => {\r\n        let hitArray = []\r\n        for(let item of this.state.data) {\r\n            if (item.id === tag.blogId) {\r\n                hitArray.push(item);\r\n            }\r\n        }\r\n\r\n        return hitArray;\r\n\r\n    }\r\n\r\n    onAutocomplete = (hit) => {\r\n        let newDataTable = [];\r\n        for(let tag of this.state.tagData) {\r\n            if (tag.tagName === hit) {\r\n                let hits = this.getPostsByTags(tag);\r\n                for (let i=0; i<hits.length;i++) {\r\n                    newDataTable.push(hits[i]);\r\n                }\r\n            }\r\n        }\r\n        for(let item of this.state.data) {\r\n            if (item.title === hit) {\r\n                newDataTable.push(item);\r\n            }\r\n        }\r\n        this.setState({\r\n            searchResults: newDataTable,\r\n            showSearch: true\r\n        })\r\n    }\r\n\r\n    onChange = (item) => {\r\n        if(item === '') {\r\n            this.setState({\r\n                searchResults: [],\r\n                showSearch: false\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const blogPostsStyle = {\r\n            marginLeft: 5,\r\n            marginRight: 5\r\n        };\r\n\r\n        if (this.state.loadingData) {\r\n            return (\r\n                <div className=\"BlogApp\">\r\n                    <Toolbar\r\n                          colored\r\n                          title=\"Blog-Pro\"\r\n                        />\r\n                    <div>\r\n                        <p>Loading...</p>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (!this.state.loadingData && this.state.showSearch) {\r\n            return (\r\n                <div className=\"BlogApp\">\r\n                    <Toolbar\r\n                          colored\r\n                          title=\"Blog-Pro\"\r\n                          children={<Search\r\n                                        data={this.state.data}\r\n                                        tagData={this.state.tagData}\r\n                                        onAutocomplete={this.onAutocomplete}\r\n                                        onChange={this.onChange}\r\n                          />}\r\n                        />\r\n                    <NewPostDialog\r\n                        data={this.state.data}\r\n                        tagData={this.state.tagData}\r\n                        updateData={this.updateData}\r\n                        updateTagData={this.updateTagData}\r\n                    />\r\n                    <div style={blogPostsStyle}>\r\n                        {this.showData(this.state.searchResults)}\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        } else if (!this.state.loadingData) {\r\n            return (\r\n                <div className=\"BlogApp\">\r\n                    <Toolbar\r\n                          colored\r\n                          title=\"Blog-Pro\"\r\n                          children={<Search\r\n                                        data={this.state.data}\r\n                                        tagData={this.state.tagData}\r\n                                        onAutocomplete={this.onAutocomplete}\r\n                                        onChange={this.onChange}\r\n                          />}\r\n                        />\r\n                    <NewPostDialog\r\n                        data={this.state.data}\r\n                        tagData={this.state.tagData}\r\n                        updateData={this.updateData}\r\n                        updateTagData={this.updateTagData}\r\n                    />\r\n                    <div style={blogPostsStyle}>\r\n                        {this.showData(this.state.data)}\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport WebFontLoader from 'webfontloader';\r\n\r\n    WebFontLoader.load({\r\n        google: {\r\n            families: ['Roboto:300,400,500,700', 'Material Icons'],\r\n        },\r\n});\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}